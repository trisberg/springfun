#!/bin/bash

VERSION="0.0.1"

FUN=""
CE_TYPE=""
CE_SCHEMA=""

function print_usage() {
cat <<EOF
springfun is for Spring Functions on Knative
version $VERSION

Commands:
  init         Initialize a function project
  add          Add a function to the project
  build        Build a function project container
  run          Run a function project container
  delete       Delete a function project container

EOF
}

function ce_types() {
  if [[ $CE_TYPE != "" ]]; then
    if [[ $CE_SCHEMA == "" ]]; then
      echo "looking up schema via type $CE_TYPE"
      CE_SCHEMA="$(kubectl get eventtype $CE_TYPE -n default -ojsonpath='{.spec.schema}')"
      if [[ $CE_SCHEMA == "" ]]; then
        echo "ERROR: unable to find schema for $CE_TYPE"
        exit 1
      else
        echo "using schema: $CE_SCHEMA"
      fi
    fi
  fi
}

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

function init() {
  if [[ $NAME == "" ]]; then
    echo "ERROR: project name must be specified"
    exit 1
  fi
  if [[ -d $NAME ]]; then
    echo "ERROR: the $NAME project already exists"
    exit 1
  fi
  if [[ $CE_TYPE != "" ]]; then
    if [[ $FUN == "" ]]; then
      echo "ERROR: function name is required, use the '--function' option"
      exit 1
    fi
  fi
  if [[ $CE_SCHEMA != "" ]]; then
    if [[ $FUN == "" ]]; then
      echo "ERROR: function name is required, use the '--function' option"
      exit 1
    fi
    if [[ $CE_TYPE == "" ]]; then
      echo "ERROR: CludEvent type is required, use the '--ce-type' option"
      exit 1
    fi
  fi

  # start.spring.io
  curl https://start.spring.io/starter.tgz \
   -d dependencies=webflux,actuator,cloud-function \
   -d language=java \
   -d javaVersion=11 \
   -d bootVersion=2.2.5.RELEASE \
   -d type=maven-project \
   -d groupId=com.example \
   -d artifactId=$NAME \
   -d name=$NAME \
   -d packageName=com.example.$NAME \
   -d baseDir=$NAME | tar -xzvf -

  # knative service
cat <<EOF > $NAME/knative-service.yaml
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: $NAME
  namespace: default
spec:
  template:
    spec:
      containers:
        - image: $NAME
EOF

  # skaffold
  cd $NAME
  skaffold init --skip-build --force=true
  mv ./skaffold.yaml ./skaffold.yaml.tmp
  sed "s/deploy:/build:+  local:+    push: true+  artifacts:+    - image: $NAME+      buildpack:+        builder: 'paketobuildpacks\/builder:bionic'+  tagPolicy:+    sha256: {}+deploy:/" ./skaffold.yaml.tmp | tr '+' '\n' > ./skaffold.yaml
  rm ./skaffold.yaml.tmp
  cd ..

  if [[ $FUN != "" ]]; then
    add
  fi

}  

function add() {
  if [[ $NAME == "" ]]; then
    echo "ERROR: project name must be specified"
    exit 1
  fi
  if [[ ! -d $NAME ]]; then
    echo "ERROR: can not find the $NAME project"
    exit 1
  fi
  if [[ $FUN == "" ]]; then
    echo "ERROR: function name is required, use the '--function' option"
    exit 1
  fi
  if [[ $CE_SCHEMA != "" ]]; then
    if [[ $CE_TYPE == "" ]]; then
      echo "ERROR: CludEvent type is required, use the '--ce-type' option"
      exit 1
    fi
  fi

  ce_types

  if [[ $CE_TYPE != "" ]]; then

    # look for cloudevents
    ce_defined=$(grep -i 'cloudevents' $NAME/pom.xml --count)

    if [[ $ce_defined == 0 ]]; then
      echo "CE dep: $ce_defined"
      # CE dep
      mv $NAME/pom.xml $NAME/pom.xml.tmp
      sed "s/^	<\/dependencies>/		<dependency>+			<groupId>io.cloudevents<\/groupId>+			<artifactId>cloudevents-api<\/artifactId>+			<version>1.2.0<\/version>+		<\/dependency>+	<\/dependencies>/" $NAME/pom.xml.tmp | tr '+' '\n' > $NAME/pom.xml
      rm $NAME/pom.xml.tmp

      # jsonschema2pojo
      mv $NAME/pom.xml $NAME/pom.xml.tmp
      sed "s/^		<\/plugins>/			<plugin>+				<groupId>org.jsonschema2pojo<\/groupId>+				<artifactId>jsonschema2pojo-maven-plugin<\/artifactId>+				<version>1.0.2<\/version>+				<configuration>+					<sourceDirectory>\${basedir}\/src\/main\/resources\/schema<\/sourceDirectory>+					<targetPackage>com.example.types<\/targetPackage>+				<\/configuration>+				<executions>+					<execution>+						<goals>+							<goal>generate<\/goal>+						<\/goals>+					<\/execution>+				<\/executions>+			<\/plugin>+		<\/plugins>/" $NAME/pom.xml.tmp | tr '+' '\n' > $NAME/pom.xml
      rm $NAME/pom.xml.tmp

      # mapper
      mkdir -p $NAME/src/main/java/com/springdeveloper/support/cloudevents
      curl https://raw.githubusercontent.com/trisberg/cloud-event-mapper/master/src/main/java/com/springdeveloper/support/cloudevents/CloudEventMapper.java \
        -o $NAME/src/main/java/com/springdeveloper/support/cloudevents/CloudEventMapper.java
    fi

    # schema
    mkdir -p $NAME/src/main/resources/schema
    pushd $PWD
    cd $NAME/src/main/resources/schema/
    wget $CE_SCHEMA
    popd

    # resolve deps
    cd $NAME
    ./mvnw compile
    cd ..
 
  # knative trigger
cat <<EOF >> $NAME/knative-trigger.yaml
---
apiVersion: eventing.knative.dev/v1beta1
kind: Trigger
metadata:
  name: $NAME-$FUN
spec:
  filter:
    attributes:
      type: $CE_TYPE
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: $NAME
    uri: $FUN
EOF

    # look for skaffold trigger manifest
    trigger_defined=$(grep -i 'knative-trigger' $NAME/skaffold.yaml --count)
    if [[ $trigger_defined == 0 ]]; then
      cd $NAME
      skaffold init --skip-build --force=true
      mv ./skaffold.yaml ./skaffold.yaml.tmp
      sed "s/deploy:/build:+  local:+    push: true+  artifacts:+    - image: $NAME+      buildpack:+        builder: 'cloudfoundry\/cnb:bionic'+  tagPolicy:+    sha256: {}+deploy:/" ./skaffold.yaml.tmp | tr '+' '\n' > ./skaffold.yaml
      rm ./skaffold.yaml.tmp
      cd ..
    fi
  fi

  # add fun bean
  pushd $PWD
  cd $NAME/src/main/java/com/example/${NAME//-}
  MAIN_FILE=$(ls)
  beans_defined=$(grep -i '@Bean' $MAIN_FILE --count)
  if [[ $beans_defined == 0 ]]; then
    mv $MAIN_FILE $MAIN_FILE.tmp
    sed -i.bak "s/import org.springframework.boot.SpringApplication;/import java.util.function.Function;++import org.springframework.boot.SpringApplication;/" $MAIN_FILE.tmp
    sed -i.bak "s/import org.springframework.boot.autoconfigure.SpringBootApplication;/import org.springframework.boot.autoconfigure.SpringBootApplication;+import org.springframework.context.annotation.Bean;/" $MAIN_FILE.tmp
    cat $MAIN_FILE.tmp | tr '+' '\n' > $MAIN_FILE
    rm $MAIN_FILE.tmp
  fi
  mv $MAIN_FILE $MAIN_FILE.tmp
  sed -i.bak "s/	public static void main(String\[\] args) {/	@Bean+	public Function<String, String> ${FUN}() {+		return (in) -> {+			return in;+		};+	}++	public static void main(String\[\] args) {/" $MAIN_FILE.tmp
  cat $MAIN_FILE.tmp | tr '+' '\n' > $MAIN_FILE
  rm $MAIN_FILE.tmp
  rm $MAIN_FILE.tmp.bak
  popd
  echo "Added $FUN function bean to $MAIN_FILE"
}  

function build() {
  if [[ $NAME == "" ]]; then
    echo "ERROR: project name must be specified"
    exit 1
  fi
  if [[ ! -d $NAME ]]; then
    echo "ERROR: can not find the $NAME project"
    exit 1
  fi
  pushd $PWD
  cd $NAME
  skaffold build
  popd
}  

function run() {
  if [[ $NAME == "" ]]; then
    echo "ERROR: project name must be specified"
    exit 1
  fi
  if [[ ! -d $NAME ]]; then
    echo "ERROR: can not find the $NAME project"
    exit 1
  fi
  pushd $PWD
  cd $NAME
  skaffold run
  popd
}  

function delete() {
  if [[ $NAME == "" ]]; then
    echo "ERROR: project name must be specified"
    exit 1
  fi
  if [[ ! -d $NAME ]]; then
    echo "ERROR: can not find the $NAME project"
    exit 1
  fi
  pushd $PWD
  cd $NAME
  skaffold delete
  popd
}  

if [[ $1 == "--help" || $1 == "-h" ]] ; then
    print_usage
    exit 0
fi

if [[ $# == 0 ]]; then
  print_usage
  exit 0
fi

COMMAND="$1"
shift

# ARGS #
while [[ $# > 0 ]]
do
  if [[ $1 == -* ]]; then
    key="$1"
    case ${key} in
      -f|--function)
        FUN=$2
      shift
      ;;
      -t|--ce-type)
        CE_TYPE=$2
      shift
      ;;
      -s|--ce-schema)
        CE_SCHEMA=$2
      shift
      ;;
      *)
      echo "ERROR: Invalid option: [$1]"
      exit 1
      ;;
    esac
    shift
  else
    if [[ $NAME = "" ]]; then
      NAME="$1"
      shift
    else
      echo "ERROR: Invalid argument: [$1]"
      exit 1
    fi
  fi
done

# COMMANDS #

if [[ "${COMMAND}" == "init" ]]; then
  init
elif [[ "${COMMAND}" == "add" ]]; then
  add
elif [[ "${COMMAND}" == "build" ]]; then
  build
elif [[ "${COMMAND}" == "run" ]]; then
  run
elif [[ "${COMMAND}" == "delete" ]]; then
  delete
else
  echo "$COMMAND is an invalid command"
  exit 1;
fi
